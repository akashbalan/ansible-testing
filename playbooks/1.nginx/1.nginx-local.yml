---
- name: Play For Installing Nginx On WebServers
  hosts: pvt
  gather_facts: yes
  become: yes
  become_user: root
  #serial: 1
  vars:
    AWS_ACCOUNT: "783198837114" #take from console
  tasks:
    - name: Print Variable
      debug:
        msg: System {{ inventory_hostname }} has variable {{ AWS_ACCOUNT }}

    - name: Print Variable Sesitive
      debug:
        msg: System {{ inventory_hostname }} has variable {{ AWS_ACCOUNT }}
      no_log: True

    - name: Perform apt update & Install basic packages
      shell: apt update && apt install -y unzip jq net-tools stress
      when: (ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_version'] == "24.04")
      timeout: 30 #“Wait only up to 30 seconds for this task to succeed.”
      tags:
        - tools #This is used to label the task 

    - name: Install Nginx Webserver Application
      apt:
        name: nginx #equivalnt to - sudo apt update && sudo apt install -y nginx
        state: latest #Ensures the latest version of the package is installed
        update_cache: yes
      when: (ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_version'] == "24.04")
      timeout: 30

    - name: Start Nginx Service
      service:
        name: nginx # equivalent to - sudo systemctl start nginx
        state: started #So in your case, state: started ensures Nginx is running after the playbook runs.
      when: (ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_version'] == "24.04")
  tags:
    - nginx

- name: Play For Copying File
  hosts: testserver01:testserver02:testserver03
  become: yes
  become_user: root
  tasks:
    - name: Copy html file
      copy:
        src: /tmp/nginxfiles/index.html #Path on the Ansible controller (the machine running the playbook).
        dest: /var/www/html/index.nginx-debian.html # Path on the target/client server (the remote server you’re managing). -------------# this is the place where the server looks to serve the file when the client requests for a file/website 
        owner: root #These set the file ownership on the client server, not the controller. So root here means the file will belong to the root user on the target machine.
        group: root
        mode: "0644"
      when: (ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_version'] == "24.04")

    - name: Copy scorekeeper.js file #If you're copying a file from one location to another on the same client machine then use  - shell: cp /etc/nginx/nginx.conf /tmp/nginx.conf.bak
      copy: #The copy module is for copying from the Ansible controller to the client
        src: /tmp/nginxfiles/scorekeeper.js
        dest: /var/www/html/scorekeeper.js
        owner: root
        group: root
        mode: "0644"
      when: (ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_version'] == "24.04")

    - name: Copy style.css file
      copy:
        src: /tmp/nginxfiles/style.css
        dest: /var/www/html/style.css
        owner: root
        group: root
        mode: "0644"
      when: (ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_version'] == "24.04")
  tags:
    - files
